import time
import json
import os
import threading

class LockerManager:
    def __init__(self, mqtt_manager=None, api_manager=None):
        # √âtat mock des casiers pour l'affichage (True = libre, False = r√©serv√©)
        self.lockers_display = [False, True]  # Casier 1 r√©serv√©, Casier 2 libre (mock)
        
        # Codes de d√©verrouillage
        self.unlock_codes = {
            0: "1234",  # Casier 1
            1: "5678"   # Casier 2
        }
        
        # Gestionnaire MQTT pour contr√¥le physique
        self.mqtt_manager = mqtt_manager
        
        # Gestionnaire API pour la logique m√©tier (futur)
        self.api_manager = api_manager
        
        # Timers pour auto-fermeture
        self.timers = {}
        
        # Callbacks pour mise √† jour de l'interface
        self.on_status_change_callback = None
        
        print("üé≠ LockerManager initialis√© avec donn√©es mock")
        print(f"   Casier 1: {'LIBRE' if self.lockers_display[0] else 'R√âSERV√â'}")
        print(f"   Casier 2: {'LIBRE' if self.lockers_display[1] else 'R√âSERV√â'}")
    
    def set_status_change_callback(self, callback):
        """D√©finit le callback pour les changements d'√©tat"""
        self.on_status_change_callback = callback
    
    def get_locker_status(self, locker_id):
        """Retourne l'√©tat d'affichage d'un casier (True = libre, False = r√©serv√©)"""
        if 0 <= locker_id < len(self.lockers_display):
            return self.lockers_display[locker_id]
        return False
    
    def reserve_locker(self, locker_id):
        """R√©serve un casier (le marque comme occup√©) - Mock pour l'instant"""
        if 0 <= locker_id < len(self.lockers_display) and self.lockers_display[locker_id]:
            self.lockers_display[locker_id] = False
            print(f"üé≠ Mock: Casier {locker_id + 1} r√©serv√©")
            self._notify_status_change()
            return True
        return False
    
    def release_locker(self, locker_id):
        """Lib√®re un casier (le marque comme disponible) - Mock pour l'instant"""
        if 0 <= locker_id < len(self.lockers_display):
            self.lockers_display[locker_id] = True
            print(f"üé≠ Mock: Casier {locker_id + 1} lib√©r√©")
            self._notify_status_change()
            return True
        return False
    
    def verify_code(self, locker_id, code):
        """V√©rifie le code et d√©clenche l'ouverture physique si correct"""
        if 0 <= locker_id < len(self.lockers_display):
            is_valid = self.unlock_codes.get(locker_id) == code
            
            if is_valid:
                print(f"‚úÖ Code correct pour casier {locker_id + 1}")
                
                # D√©clencher l'ouverture physique
                self.trigger_physical_opening(locker_id)
                
                # Lib√©rer le casier en mock (il devient disponible)
                self.release_locker(locker_id)
                
                # TODO: Appeler l'API pour marquer le casier comme lib√©r√©
                if self.api_manager:
                    self.api_manager.release_locker(locker_id)
                
            else:
                print(f"‚ùå Code incorrect pour casier {locker_id + 1}")
            
            return is_valid
        return False
    
    def handle_mqtt_command(self, casier_id, command):
        """Traite une commande MQTT (1 = ouvrir, 0 = fermer)"""
        # Pour l'instant, juste pour le contr√¥le physique
        pass
    
    def set_unlock_code(self, locker_id, code):
        """D√©finit le code de d√©verrouillage d'un casier"""
        if 0 <= locker_id < len(self.lockers_display):
            self.unlock_codes[locker_id] = code
            print(f"üîë Code modifi√© pour casier {locker_id + 1}: {code}")
            return True
        return False
    
    def save_state(self):
        """Sauvegarde l'√©tat des casiers dans un fichier"""
        try:
            state = {
                "lockers_display": self.lockers_display,
                "unlock_codes": self.unlock_codes,
                "last_update": time.time()
            }
            
            if not os.path.exists("data"):
                os.makedirs("data")
            
            with open("data/locker_state.json", "w") as f:
                json.dump(state, f, indent=2)
                
        except Exception as e:
            print(f"Erreur sauvegarde √©tat: {e}")
    
    def load_state(self):
        """Charge l'√©tat des casiers depuis un fichier"""
        try:
            if os.path.exists("data/locker_state.json"):
                with open("data/locker_state.json", "r") as f:
                    state = json.load(f)
                
                self.lockers_display = state.get("lockers_display", [False, True])
                self.unlock_codes = state.get("unlock_codes", {0: "1234", 1: "5678"})
                
                # Convertir les cl√©s string en int si n√©cessaire
                if isinstance(list(self.unlock_codes.keys())[0], str):
                    self.unlock_codes = {int(k): v for k, v in self.unlock_codes.items()}
                
                print("√âtat des casiers charg√© depuis le fichier")
                
        except Exception as e:
            print(f"Erreur chargement √©tat: {e}")
            # Utiliser les valeurs par d√©faut
            self.lockers_display = [False, True]
            self.unlock_codes = {0: "1234", 1: "5678"}

    def trigger_physical_opening(self, locker_id):
        """D√©clenche l'ouverture physique du casier avec timer de 20 secondes"""
        print(f"üîì D√©clenchement ouverture physique casier {locker_id + 1}")
        
        # Annuler le timer pr√©c√©dent s'il existe
        if locker_id in self.timers:
            self.timers[locker_id].cancel()
        
        # Envoyer commande d'ouverture via MQTT
        if self.mqtt_manager:
            self.mqtt_manager.open_locker(locker_id)
        
        # Programmer la fermeture automatique apr√®s 20 secondes
        def auto_close():
            print(f"‚è∞ Auto-fermeture casier {locker_id + 1} apr√®s 20 secondes")
            if self.mqtt_manager:
                self.mqtt_manager.close_locker(locker_id)
        
        self.timers[locker_id] = threading.Timer(20.0, auto_close)
        self.timers[locker_id].start()
        
        print(f"‚è±Ô∏è Timer de 20 secondes activ√© pour casier {locker_id + 1}")
    
    def toggle_mock_status(self, locker_id):
        """Bascule l'√©tat mock d'un casier (pour tests)"""
        if 0 <= locker_id < len(self.lockers_display):
            self.lockers_display[locker_id] = not self.lockers_display[locker_id]
            status = "LIBRE" if self.lockers_display[locker_id] else "R√âSERV√â"
            print(f"üé≠ Mock casier {locker_id + 1} -> {status}")
            self._notify_status_change()
            return True
        return False
    
    def _notify_status_change(self):
        """Notifie l'interface d'un changement d'√©tat"""
        if self.on_status_change_callback:
            self.on_status_change_callback()
    
    def cleanup(self):
        """Nettoie les timers actifs"""
        for timer in self.timers.values():
            if timer.is_alive():
                timer.cancel()
        self.timers.clear()
        print("üßπ Timers nettoy√©s")

    # M√©thodes pour future int√©gration API
    def sync_with_api(self):
        """Synchronise l'√©tat avec l'API (futur)"""
        if self.api_manager:
            try:
                # TODO: R√©cup√©rer l'√©tat depuis l'API
                api_status = self.api_manager.get_lockers_status()
                if api_status:
                    self.lockers_display = api_status
                    self._notify_status_change()
                    print("üîÑ √âtat synchronis√© avec l'API")
            except Exception as e:
                print(f"‚ùå Erreur synchronisation API: {e}")
    
    def update_from_api(self, locker_id, status):
        """Met √† jour l'√©tat d'un casier depuis l'API (futur)"""
        if 0 <= locker_id < len(self.lockers_display):
            self.lockers_display[locker_id] = status
            self._notify_status_change()
            print(f"üîÑ API: Casier {locker_id + 1} -> {'LIBRE' if status else 'R√âSERV√â'}")
